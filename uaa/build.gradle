Project identityCommon = parent.subprojects.find { it.name.equals('cloudfoundry-identity-common') }
Project identityScim = parent.subprojects.find { it.name.equals('cloudfoundry-identity-scim') }

apply plugin: 'war'

war {
    //workaround for maven <scope>optional</scope>
    rootSpec.exclude("**/spring-security-oauth-*.jar")
}

description = 'UAA'
dependencies {
  compile identityCommon
  compile identityScim
  compile group: 'cglib', name: 'cglib', version:'2.2.2'
  runtime group: 'org.springframework.security', name: 'spring-security-config', version:parent.springSecurityVersion
  runtime group: 'org.springframework.security', name: 'spring-security-jwt', version:'1.0.1.RELEASE'
  runtime group: 'org.springframework.retry', name: 'spring-retry', version:'1.0.2.RELEASE'
  runtime group: 'org.aspectj', name: 'aspectjweaver', version:'1.6.9'
  runtime group: 'org.apache.tomcat', name: 'tomcat-jdbc', version:parent.tomcatVersion
  runtime group: 'javax.servlet', name: 'jstl', version:'1.2'
  runtime group: 'eu.tekul', name: 'szxcvbn_2.8.2', version:'0.2'
  runtime(group: 'edu.vt.middleware', name: 'vt-password', version:'3.1.1') {
    exclude(module: 'bcprov-jdk15')
    exclude(module: 'commons-logging')
  }
  runtime group: 'postgresql', name: 'postgresql', version:parent.postgresqlVersion
  testCompile identityCommon.configurations.testCompile.dependencies
  testCompile identityCommon.sourceSets.test.output
  testCompile(group: 'org.apache.directory.server', name: 'apacheds-all', version:'1.5.5') {
    exclude(module: 'slf4j-api')
  }
  providedCompile group: 'javax.servlet', name: 'javax.servlet-api', version:'3.0.1'
  providedCompile group: 'javax.servlet.jsp', name: 'jsp-api', version:'2.1'
}

apply from: 'build_properties.gradle'

test.dependsOn identityCommon.instrumentedJar, identityScim.instrumentedJar

task integrationTest(type: Test) {
  dependsOn prepareDatabase

  finalizedBy flushCoverageData

  filter {
    includeTestsMatching "org.cloudfoundry.identity.uaa.integration.*"
  }
}

task instrumentedWar(type: War, dependsOn: instrument) {
  destinationDir = file("$buildDir/instrumented_libs")
  classpath = war.classpath
                .minus(files('/classes')).plus(files('/instrumented_classes'))
                .collect(rewriteInstrumentedLibs)
  onlyIf { runningWithCoverage() }
}

instrumentedWar.dependsOn identityCommon.tasks.findByName('instrumentedJar')
instrumentedWar.dependsOn identityScim.tasks.findByName('instrumentedJar')
assemble.dependsOn instrumentedWar

project.gradle.taskGraph.whenReady { TaskExecutionGraph graph ->
  if (runningWithCoverage()) {
    test {
      classpath = files(test.classpath.collect(rewriteInstrumentedLibs))
    }
  }
}